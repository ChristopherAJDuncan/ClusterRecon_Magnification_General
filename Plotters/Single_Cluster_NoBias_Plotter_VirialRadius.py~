#Produces ML-point-estimate plots of posteriors of a Combined run, with the aim of showing no bias for a given experiment

import numpy as np
import pylab as pl
import math
import sys

Experiment_Colour = ['r','b']
#STAGES_Cluster_Label = ['A901a', 'A901b', 'A902', 'SW']

######READ in PARAMETER FILE#######
Bias_Directory_Head = '/disk1/cajd/Size_Magnification/Bayesian_DM_Profile_Constraints_Output/SizeMag/SingleA901a_Bias/STAGES+COMBO/Bias_CutsOnPrior_CoreRadius/'
Mass_Directories = ['r200_0.7/', 'r200_1.9/']
#Mass_Directories = ['r200_0.7/','r200_1.1/','r200_1.5/', 'r200_1.9/']
Bias_File = 'BiasesAndErrorVariance.dat'

Experiment_Label = ['STAGES, SizeMag']

Recovered_Mass_Col = 1
Mass_Bias_Col = 2
#Antisymmetric error
Mass_Error_Cols = [3,4]

f = pl.figure()
ax = f.add_subplot(111)

for c in range(0, len(Mass_Directories)):
    Bias_Input = np.genfromtxt(Bias_Directory_Head+Mass_Directories[c]+Bias_File)

    if(c==1):
        ax.errorbar(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col], Bias_Input[Mass_Bias_Col]/(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col]), yerr = [[Bias_Input[Mass_Error_Cols[1]]/(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col])],[Bias_Input[Mass_Error_Cols[0]]/(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col])]], color = Experiment_Colour[0], linewidth = 3., marker = 'x')
#        ax.errorbar(Bias_Input[Recovered_Mass_Col], Bias_Input[Mass_Bias_Col], yerr = (Bias_Input[Mass_Error_Cols[0]], Bias_Input[Mass_Error_Cols[1]]), color = Experiment_Colour[0], linewidth = 3., marker = 'x', label = 'Lensed Prior')
    else:
        ax.errorbar(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col], Bias_Input[Mass_Bias_Col]/(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col]), yerr = [[Bias_Input[Mass_Error_Cols[1]]/(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col])],[Bias_Input[Mass_Error_Cols[0]]/(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col])]], color = Experiment_Colour[0], linewidth = 3., marker = 'x')
#        ax.errorbar(Bias_Input[Recovered_Mass_Col]+Bias_Input[Mass_Bias_Col], Bias_Input[Mass_Bias_Col], yerr = [[Bias_Input[Mass_Error_Cols[1]]],[Bias_Input[Mass_Error_Cols[0]]]], color = Experiment_Colour[0], linewidth = 3., marker = 'x')

#Plot zero line
ax.plot(ax.get_xlim(), (0.,0.), linestyle = '--')

ax.legend()
ax.set_xlabel(r'Input Virial Radius $\left(r_{200}\; \left[\frac{\rm Mpc}{h}\right]\right)$'); ax.set_ylabel(r'Fractional Bias in Recovered Virial Radius')

pl.show()
        
#Standard output is "Input, Output, Variance, Input_Ap_Mass, Output_Ap_Mass, Variance" with a space between Clusters.#
'''
STAGES_Bias = np.genfromtxt(STAGES_Bias_File)
nCluster = 4

if( ((1.*STAGES_Bias.shape[0]/nCluster).is_integer() == False) \
    or (1.*STAGES_Bias.shape[0]/nCluster) != 1):
    print 'STAGES input file is not of the expected shape, exiting'
    exit()

f = pl.figure(1, (6,2*6))
ax = f.add_subplot(211)
ax2 = f.add_subplot(212)

#Plot 1-to-1 line#
for i in range(nCluster):
    ax.errorbar(STAGES_Bias[i,0], (STAGES_Bias[i,1]-STAGES_Bias[i,0])/STAGES_Bias[i,0], yerr = STAGES_Bias[i,2]/STAGES_Bias[i,0], color = Experiment_Colour[1], linewidth = 3., marker = 'x')    
    
x = np.linspace(ax.get_xlim()[0], ax.get_xlim()[1], 100)
ax.plot(x,x, linestyle = '--')

ax.set_xlabel(r'Input Virial Radius ($r_{200}\; \left[\frac{\rm Mpc}{h}\right]$)'); ax.set_ylabel(r'Output Virial Radius ($r_{200}\; \left[\frac{\rm Mpc}{h}\right]$)')
ax2.set_xlabel(r'Input Virial Radius ($r_{200}\; \left[\frac{\rm Mpc}{h}\right]$)'); ax2.set_ylabel(r'Fractional Variation in Output Radius ($r_{200}\; \left[\frac{\rm Mpc}{h}\right]$)')
ax.legend(loc = 2)
ax2.legend(loc = 3)
f.subplots_adjust(left = 0.18)
pl.show()

if(len(sys.argv) == 2):
    nCluster = 1
    R200_Bias_File = sys.argv[2]

    R200_Bias = np.genfromtxt(R200_Bias_File)

    if( ((1.*R200_Bias.shape[0]/nCluster).is_integer() == False) ):
        print 'R200 input file is not of the expected shape, exiting'
        exit()
'''
